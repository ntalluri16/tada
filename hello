#!/bin/bash

# ======= CONFIGURATION =======
GROUP_ID="your-group-id"
DATASET_ID="your-dataset-id"
POLL_INTERVAL=15  # seconds
TOKEN_RENEW_BUFFER=300  # renew 5 min before expiry

# ======= TOKEN FETCH (replace with your actual logic) =======
fetch_token() {
  echo "üîë Fetching new token..."
  # Replace this with your real code to fetch token
  # For example, if your code sets $ACCESS_TOKEN and optionally $EXPIRES_IN
  # Set fake example values for now:
  ACCESS_TOKEN=$(your_token_fetch_command_here)
  EXPIRES_IN=3600  # Adjust if your logic knows expiry
  TOKEN_TIMESTAMP=$(date +%s)
}

# ======= TOKEN EXPIRY CHECK =======
is_token_expired() {
  CURRENT_TIME=$(date +%s)
  TIME_ELAPSED=$((CURRENT_TIME - TOKEN_TIMESTAMP))
  TIME_LEFT=$((EXPIRES_IN - TIME_ELAPSED))
  if [[ $TIME_LEFT -le $TOKEN_RENEW_BUFFER ]]; then
    return 0
  else
    return 1
  fi
}

# ======= GET STATUS (no jq) =======
get_status() {
  RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X GET \
    -H "Authorization: Bearer $ACCESS_TOKEN" \
    "https://api.powerbi.com/v1.0/myorg/groups/$GROUP_ID/datasets/$DATASET_ID/refreshes?\$top=1")

  HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS" | cut -d':' -f2)
  BODY=$(echo "$RESPONSE" | sed -n '1,/HTTP_STATUS:/p' | sed '$d')

  if [[ "$HTTP_STATUS" == "401" || "$HTTP_STATUS" == "403" ]]; then
    echo "‚ö†Ô∏è Token invalid or expired. Refreshing token..."
    fetch_token
    return 1
  fi

  # Extract "status" from the response manually (basic parsing)
  STATUS=$(echo "$BODY" | grep -o '"status"[[:space:]]*:[[:space:]]*"[^"]*"' | head -n1 | cut -d':' -f2 | tr -d ' "')

  echo "$STATUS"
  return 0
}

# ======= MAIN LOOP =======
fetch_token  # Get initial token

echo "‚è≥ Polling refresh status..."

while true; do
  if is_token_expired; then
    echo "üîÅ Token expiring soon. Refreshing..."
    fetch_token
  fi

  STATUS=$(get_status)
  RESULT=$?

  if [[ $RESULT -ne 0 ]]; then
    echo "‚öôÔ∏è  Retrying after token refresh..."
    sleep $POLL_INTERVAL
    continue
  fi

  if [[ "$STATUS" == "Completed" ]]; then
    echo "‚úÖ Refresh completed successfully."
    exit 0
  elif [[ "$STATUS" == "Failed" ]]; then
    echo "‚ùå Refresh failed."
    exit 1
  elif [[ -z "$STATUS" ]]; then
    echo "‚ö†Ô∏è No status found in response. Waiting..."
  else
    echo "üîÑ Current status: $STATUS"
  fi

  sleep $POLL_INTERVAL
done
